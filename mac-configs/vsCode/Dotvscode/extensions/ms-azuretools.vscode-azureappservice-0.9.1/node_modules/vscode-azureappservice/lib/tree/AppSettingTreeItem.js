"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const vscode_azureextensionui_1 = require("vscode-azureextensionui");
const extensionVariables_1 = require("../extensionVariables");
class AppSettingTreeItem {
    constructor(key, value) {
        this.contextValue = AppSettingTreeItem.contextValue;
        this.key = key;
        this.value = value;
    }
    get id() {
        return this.key;
    }
    get label() {
        return `${this.key}=${this.value}`;
    }
    get iconPath() {
        return {
            light: path.join(__filename, '..', '..', '..', 'resources', 'light', 'Item_16x_vscode.svg'),
            dark: path.join(__filename, '..', '..', '..', 'resources', 'dark', 'Item_16x_vscode.svg')
        };
    }
    edit(node) {
        return __awaiter(this, void 0, void 0, function* () {
            const newValue = yield extensionVariables_1.ext.ui.showInputBox({
                prompt: `Enter setting value for "${this.key}"`,
                value: this.value
            });
            this.value = newValue;
            yield node.parent.treeItem.editSettingItem(this.key, this.key, newValue);
            yield node.refresh();
        });
    }
    rename(node) {
        return __awaiter(this, void 0, void 0, function* () {
            const oldKey = this.key;
            const newKey = yield extensionVariables_1.ext.ui.showInputBox({
                prompt: `Enter a new name for "${oldKey}"`,
                value: this.key,
                validateInput: (v) => node.parent.treeItem.validateNewKeyInput(v, oldKey)
            });
            this.key = newKey;
            yield node.parent.treeItem.editSettingItem(oldKey, newKey, this.value);
            yield node.refresh();
        });
    }
    deleteTreeItem(node) {
        return __awaiter(this, void 0, void 0, function* () {
            yield extensionVariables_1.ext.ui.showWarningMessage(`Are you sure you want to delete setting "${this.key}"?`, { modal: true }, vscode_azureextensionui_1.DialogResponses.deleteResponse, vscode_azureextensionui_1.DialogResponses.cancel);
            yield node.parent.treeItem.deleteSettingItem(this.key);
        });
    }
}
AppSettingTreeItem.contextValue = 'applicationSettingItem';
exports.AppSettingTreeItem = AppSettingTreeItem;
//# sourceMappingURL=AppSettingTreeItem.js.map