"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable-next-line:no-require-imports
const StorageManagementClient = require("azure-arm-storage");
const azure_arm_website_1 = require("azure-arm-website");
const vscode_1 = require("vscode");
const vscode_azureextensionui_1 = require("vscode-azureextensionui");
const extensionVariables_1 = require("../extensionVariables");
const localize_1 = require("../localize");
const randomUtils_1 = require("../utils/randomUtils");
const AppKind_1 = require("./AppKind");
class SiteCreateStep extends vscode_azureextensionui_1.AzureWizardExecuteStep {
    constructor(functionAppSettings) {
        super();
        this._functionAppSettings = functionAppSettings || {};
    }
    execute(wizardContext) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!wizardContext.site) {
                const creatingNewApp = localize_1.localize('CreatingNewApp', 'Creating {0} "{1}"...', AppKind_1.getAppKindDisplayName(wizardContext.newSiteKind), wizardContext.newSiteName);
                yield vscode_1.window.withProgress({ location: vscode_1.ProgressLocation.Notification, title: creatingNewApp }, () => __awaiter(this, void 0, void 0, function* () {
                    extensionVariables_1.ext.outputChannel.appendLine(creatingNewApp);
                    const client = new azure_arm_website_1.WebSiteManagementClient(wizardContext.credentials, wizardContext.subscriptionId, wizardContext.environment.resourceManagerEndpointUrl);
                    vscode_azureextensionui_1.addExtensionUserAgent(client);
                    wizardContext.site = yield client.webApps.createOrUpdate(wizardContext.resourceGroup.name, wizardContext.newSiteName, {
                        name: wizardContext.newSiteName,
                        kind: AppKind_1.getSiteModelKind(wizardContext.newSiteKind, wizardContext.newSiteOS),
                        location: wizardContext.location.name,
                        serverFarmId: wizardContext.plan ? wizardContext.plan.id : undefined,
                        clientAffinityEnabled: wizardContext.newSiteKind === AppKind_1.AppKind.app,
                        siteConfig: yield this.getNewSiteConfig(wizardContext)
                    });
                    const createdNewApp = localize_1.localize('CreatedNewApp', 'Created new {0} "{1}": {2}', AppKind_1.getAppKindDisplayName(wizardContext.newSiteKind), wizardContext.site.name, `https://${wizardContext.site.defaultHostName}`);
                    extensionVariables_1.ext.outputChannel.appendLine(createdNewApp);
                    extensionVariables_1.ext.outputChannel.appendLine('');
                    const viewOutput = {
                        title: localize_1.localize('viewOutput', 'View Output')
                    };
                    // Note: intentionally not waiting for the result of this before returning
                    vscode_1.window.showInformationMessage(createdNewApp, viewOutput).then((result) => {
                        if (result === viewOutput) {
                            extensionVariables_1.ext.outputChannel.show();
                        }
                    });
                }));
            }
            return wizardContext;
        });
    }
    getNewSiteConfig(wizardContext) {
        return __awaiter(this, void 0, void 0, function* () {
            const newSiteConfig = {
                linuxFxVersion: wizardContext.newSiteRuntime
            };
            if (wizardContext.newSiteKind === AppKind_1.AppKind.functionapp) {
                const maxFileShareNameLength = 63;
                const storageClient = new StorageManagementClient(wizardContext.credentials, wizardContext.subscriptionId, wizardContext.environment.resourceManagerEndpointUrl);
                vscode_azureextensionui_1.addExtensionUserAgent(storageClient);
                const [, storageResourceGroup] = wizardContext.storageAccount.id.match(/\/resourceGroups\/([^/]+)\//);
                const keysResult = yield storageClient.storageAccounts.listKeys(storageResourceGroup, wizardContext.storageAccount.name);
                let fileShareName = wizardContext.newSiteName.toLocaleLowerCase() + '-content'.slice(0, maxFileShareNameLength);
                if (!wizardContext.newStorageAccountName) {
                    const randomLetters = 4;
                    fileShareName = `${fileShareName.slice(0, maxFileShareNameLength - randomLetters - 1)}-${randomUtils_1.randomUtils.getRandomHexString(randomLetters)}`;
                }
                let storageConnectionString = '';
                if (keysResult.keys && keysResult.keys[0].value) {
                    storageConnectionString = `DefaultEndpointsProtocol=https;AccountName=${wizardContext.storageAccount.name};AccountKey=${keysResult.keys[0].value}`;
                }
                newSiteConfig.appSettings = [
                    {
                        name: 'AzureWebJobsDashboard',
                        value: storageConnectionString
                    },
                    {
                        name: 'AzureWebJobsStorage',
                        value: storageConnectionString
                    },
                    {
                        name: 'WEBSITE_CONTENTAZUREFILECONNECTIONSTRING',
                        value: storageConnectionString
                    },
                    {
                        name: 'WEBSITE_CONTENTSHARE',
                        value: fileShareName
                    }
                ];
                for (const key of Object.keys(this._functionAppSettings)) {
                    newSiteConfig.appSettings.push({
                        name: key,
                        value: this._functionAppSettings[key]
                    });
                }
            }
            return newSiteConfig;
        });
    }
}
exports.SiteCreateStep = SiteCreateStep;
//# sourceMappingURL=SiteCreateStep.js.map