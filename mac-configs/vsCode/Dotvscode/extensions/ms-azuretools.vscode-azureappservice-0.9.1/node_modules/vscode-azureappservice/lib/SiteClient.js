"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const azure_arm_website_1 = require("azure-arm-website");
const vscode_azureextensionui_1 = require("vscode-azureextensionui");
const errors_1 = require("./errors");
/**
 * Wrapper of a WebSiteManagementClient for use with a specific Site
 * Reduces the number of arguments needed for every call and automatically ensures the 'slot' method is called when appropriate
 */
class SiteClient {
    constructor(site, node) {
        const matches = site.serverFarmId.match(/\/subscriptions\/(.*)\/resourceGroups\/(.*)\/providers\/Microsoft.Web\/serverfarms\/(.*)/);
        if (!site.id || !site.name || !site.resourceGroup || !site.type || !site.defaultHostName || matches === null || matches.length < 4) {
            throw new errors_1.ArgumentError(site);
        }
        this.isSlot = site.type.toLowerCase() === 'microsoft.web/sites/slots';
        this.id = site.id;
        [this.siteName, this.slotName] = this.isSlot ? site.name.split('/') : [site.name, undefined];
        this.fullName = this.siteName + (this.isSlot ? `-${this.slotName}` : '');
        this.resourceGroup = site.resourceGroup;
        this.location = site.location;
        this.serverFarmId = site.serverFarmId;
        this.kind = site.kind;
        this.initialState = site.state;
        this.isFunctionApp = site.kind && site.kind.includes('functionapp');
        this.planResourceGroup = matches[2];
        this.planName = matches[3];
        this.defaultHostName = site.defaultHostName;
        this.defaultHostUrl = `https://${this.defaultHostName}`;
        this.kuduHostName = site.hostNameSslStates.find((h) => h.hostType && h.hostType.toLowerCase() === 'repository').name;
        this.kuduUrl = `https://${this.kuduHostName}`;
        this.gitUrl = `${this.kuduHostName}:443/${site.repositorySiteName}.git`;
        this._node = node;
    }
    get _client() {
        const client = new azure_arm_website_1.WebSiteManagementClient(this._node.credentials, this._node.subscriptionId, this._node.environment.resourceManagerEndpointUrl);
        vscode_azureextensionui_1.addExtensionUserAgent(client);
        return client;
    }
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            this.isSlot ?
                yield this._client.webApps.stopSlot(this.resourceGroup, this.siteName, this.slotName) :
                yield this._client.webApps.stop(this.resourceGroup, this.siteName);
        });
    }
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            this.isSlot ?
                yield this._client.webApps.startSlot(this.resourceGroup, this.siteName, this.slotName) :
                yield this._client.webApps.start(this.resourceGroup, this.siteName);
        });
    }
    getState() {
        return __awaiter(this, void 0, void 0, function* () {
            return (this.isSlot ?
                yield this._client.webApps.getSlot(this.resourceGroup, this.siteName, this.slotName) :
                yield this._client.webApps.get(this.resourceGroup, this.siteName)).state;
        });
    }
    getWebAppPublishCredential() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.isSlot ?
                yield this._client.webApps.listPublishingCredentialsSlot(this.resourceGroup, this.siteName, this.slotName) :
                yield this._client.webApps.listPublishingCredentials(this.resourceGroup, this.siteName);
        });
    }
    getSiteConfig() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.isSlot ?
                yield this._client.webApps.getConfigurationSlot(this.resourceGroup, this.siteName, this.slotName) :
                yield this._client.webApps.getConfiguration(this.resourceGroup, this.siteName);
        });
    }
    updateConfiguration(config) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.isSlot ?
                yield this._client.webApps.updateConfigurationSlot(this.resourceGroup, this.siteName, config, this.slotName) :
                yield this._client.webApps.updateConfiguration(this.resourceGroup, this.siteName, config);
        });
    }
    getLogsConfig() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.isSlot ?
                yield this._client.webApps.getDiagnosticLogsConfigurationSlot(this.resourceGroup, this.siteName, this.slotName) :
                yield this._client.webApps.getDiagnosticLogsConfiguration(this.resourceGroup, this.siteName);
        });
    }
    updateLogsConfig(config) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.isSlot ?
                yield this._client.webApps.updateDiagnosticLogsConfigSlot(this.resourceGroup, this.siteName, config, this.slotName) :
                yield this._client.webApps.updateDiagnosticLogsConfig(this.resourceGroup, this.siteName, config);
        });
    }
    getAppServicePlan() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._client.appServicePlans.get(this.planResourceGroup, this.planName);
        });
    }
    updateSourceControl(siteSourceControl) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.isSlot ?
                yield this._client.webApps.createOrUpdateSourceControlSlot(this.resourceGroup, this.siteName, siteSourceControl, this.slotName) :
                yield this._client.webApps.createOrUpdateSourceControl(this.resourceGroup, this.siteName, siteSourceControl);
        });
    }
    syncRepository() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.isSlot ?
                yield this._client.webApps.syncRepositorySlot(this.resourceGroup, this.siteName, this.slotName) :
                yield this._client.webApps.syncRepository(this.resourceGroup, this.siteName);
        });
    }
    listApplicationSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.isSlot ?
                yield this._client.webApps.listApplicationSettingsSlot(this.resourceGroup, this.siteName, this.slotName) :
                yield this._client.webApps.listApplicationSettings(this.resourceGroup, this.siteName);
        });
    }
    updateApplicationSettings(appSettings) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.isSlot ?
                yield this._client.webApps.updateApplicationSettingsSlot(this.resourceGroup, this.siteName, appSettings, this.slotName) :
                yield this._client.webApps.updateApplicationSettings(this.resourceGroup, this.siteName, appSettings);
        });
    }
    deleteMethod(options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.isSlot ?
                yield this._client.webApps.deleteSlot(this.resourceGroup, this.siteName, this.slotName, options) :
                yield this._client.webApps.deleteMethod(this.resourceGroup, this.siteName, options);
        });
    }
    listInstanceIdentifiers() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.isSlot ?
                yield this._client.webApps.listInstanceIdentifiersSlot(this.resourceGroup, this.siteName, this.slotName) :
                yield this._client.webApps.listInstanceIdentifiers(this.resourceGroup, this.siteName);
        });
    }
    listSourceControls() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._client.listSourceControls();
        });
    }
}
exports.SiteClient = SiteClient;
//# sourceMappingURL=SiteClient.js.map